"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGetViableDragPositions = void 0;
/* eslint-disable no-continue */
var react_1 = require("react");
var useGetParentOfLinearItem_1 = require("./useGetParentOfLinearItem");
var ControlledTreeEnvironment_1 = require("../controlledEnvironment/ControlledTreeEnvironment");
var useCanDropAt_1 = require("./useCanDropAt");
var useGetViableDragPositions = function () {
    var environment = (0, ControlledTreeEnvironment_1.useTreeEnvironment)();
    var getParentOfLinearItem = (0, useGetParentOfLinearItem_1.useGetGetParentOfLinearItem)();
    var canDropAt = (0, useCanDropAt_1.useCanDropAt)();
    var isDescendant = (0, react_1.useCallback)(function (treeId, itemLinearIndex, potentialParents) {
        // based on DraggingPositionEvaluation.isDescendant()
        var _a = getParentOfLinearItem(itemLinearIndex, treeId), parent = _a.parent, parentLinearIndex = _a.parentLinearIndex;
        if (potentialParents.some(function (p) { return p.index === parent.item; }))
            return true;
        if (parent.depth === 0)
            return false;
        return isDescendant(treeId, parentLinearIndex, potentialParents);
    }, [getParentOfLinearItem]);
    return (0, react_1.useCallback)(function (treeId, draggingItems) {
        var _a, _b, _c, _d;
        var linearItems = environment.linearItems[treeId];
        var targets = [];
        var skipUntilDepthIsLowerThan = -1;
        for (var linearIndex = 0; linearIndex < linearItems.length; 
        // eslint-disable-next-line no-plusplus
        linearIndex++) {
            var _e = linearItems[linearIndex], item = _e.item, depth = _e.depth;
            if (skipUntilDepthIsLowerThan !== -1 &&
                depth > skipUntilDepthIsLowerThan) {
                continue;
            }
            else {
                skipUntilDepthIsLowerThan = -1;
            }
            var parent_1 = getParentOfLinearItem(linearIndex, treeId).parent;
            var childIndex = environment.items[parent_1.item].children.indexOf(item);
            if (isDescendant(treeId, linearIndex, draggingItems)) {
                skipUntilDepthIsLowerThan = depth + 1;
                continue;
            }
            var itemPosition = {
                targetType: 'item',
                parentItem: parent_1.item,
                targetItem: item,
                linearIndex: linearIndex,
                depth: depth,
                treeId: treeId,
            };
            var topPosition = {
                targetType: 'between-items',
                parentItem: parent_1.item,
                linePosition: 'top',
                childIndex: childIndex,
                depth: depth,
                treeId: treeId,
                linearIndex: linearIndex,
            };
            var bottomPosition = {
                targetType: 'between-items',
                parentItem: parent_1.item,
                linePosition: 'bottom',
                linearIndex: linearIndex + 1,
                childIndex: childIndex + 1,
                depth: depth,
                treeId: treeId,
            };
            var depthOfItemAbove = (_b = (_a = linearItems[linearIndex - 1]) === null || _a === void 0 ? void 0 : _a.depth) !== null && _b !== void 0 ? _b : -1;
            var depthOfItemBelow = (_d = (_c = linearItems[linearIndex + 1]) === null || _c === void 0 ? void 0 : _c.depth) !== null && _d !== void 0 ? _d : -1;
            var isWithinFolder = depth === depthOfItemAbove;
            var isBelowOpenFolder = depth === depthOfItemBelow - 1;
            if (!isWithinFolder && canDropAt(topPosition, draggingItems)) {
                targets.push(topPosition);
            }
            if (canDropAt(itemPosition, draggingItems)) {
                targets.push(itemPosition);
            }
            if (!isBelowOpenFolder && canDropAt(bottomPosition, draggingItems)) {
                targets.push(bottomPosition);
            }
        }
        return targets;
    }, [
        canDropAt,
        environment.items,
        environment.linearItems,
        getParentOfLinearItem,
        isDescendant,
    ]);
};
exports.useGetViableDragPositions = useGetViableDragPositions;
