import * as React from 'react';
import { useContext, useEffect } from 'react';
import { InteractionManagerProvider } from './InteractionManagerProvider';
import { DragAndDropProvider } from '../drag/DragAndDropProvider';
import { EnvironmentActionsProvider } from '../environmentActions/EnvironmentActionsProvider';
import { useControlledTreeEnvironmentProps } from './useControlledTreeEnvironmentProps';
var TreeEnvironmentContext = React.createContext(null);
export var useTreeEnvironment = function () { return useContext(TreeEnvironmentContext); };
export var ControlledTreeEnvironment = React.forwardRef(function (props, ref) {
    var environmentContextProps = useControlledTreeEnvironmentProps(props);
    var viewState = props.viewState, onFocusItem = props.onFocusItem;
    // Make sure that every tree view state has a focused item
    useEffect(function () {
        var _a, _b, _c;
        for (var _i = 0, _d = Object.keys(environmentContextProps.trees); _i < _d.length; _i++) {
            var treeId = _d[_i];
            var firstItemIndex = (_b = (_a = props.items[environmentContextProps.trees[treeId].rootItem]) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b[0];
            var firstItem = firstItemIndex && props.items[firstItemIndex];
            if (!((_c = viewState[treeId]) === null || _c === void 0 ? void 0 : _c.focusedItem) &&
                environmentContextProps.trees[treeId] &&
                firstItem) {
                onFocusItem === null || onFocusItem === void 0 ? void 0 : onFocusItem(firstItem, treeId, false);
            }
        }
    }, [environmentContextProps.trees, onFocusItem, props.items, viewState]);
    return (React.createElement(TreeEnvironmentContext.Provider, { value: environmentContextProps },
        React.createElement(InteractionManagerProvider, null,
            React.createElement(DragAndDropProvider, null,
                React.createElement(EnvironmentActionsProvider, { ref: ref }, props.children)))));
});
